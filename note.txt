Backend project set up

steps.
1. Navigate to your backend project directory and initialise it by running npm init -y

2.Install dependencies by running this command  npm i express jsonwebtoken mongoose 
multer bcryptjs cors dotenv exceljs

3. set up your server.js file which is your entry file.

 Summary of the Entry File (Plain English)

Loads environment variables using dotenv, like port number or frontend URL.
Imports needed packages:
express to create the server
cors to allow requests from other origins (like frontend)
path (not used here but useful for file paths)
Creates the Express app.
Enables CORS so the frontend (like React) can communicate with this backend.
Parses JSON in incoming requests.
Sets up routes (commented out for now) ‚Äî for auth, users, tasks, etc.
Starts the server on the given port and logs a message.

4.set up nodemon
a. run this command npm install --save-dev nodemon
b. update your package.json file like this
   "scripts": {
  "start": "node index.js",
  "dev": "nodemon index.js"
}

5. üóÇÔ∏è Project Structure. write down the files and folders for backend.

6. üß™ Run the Server with this command npm run dev


*********************************************************
EXPLAINING MY MODEL FILES.
userModels: Stores information about customers/admins using the system.
loan model: Represents a customer's loan request.
repayment model: Tracks monthly payments for each loan.
transaction model: Stores each payment attempt or history.
notification model:Useful for reminding users of upcoming repayments or system alerts.
document model: if you need to upload identity proofs, etc.
settings model: to manage loan interest rates, term options, etc.
**********************************************************

EXPLAINING MY ROUTE FILES.
1. ‚úÖ 1. Auth Routes (/api/auth)
       Handles registration, login, and token verification.

 Method   Endpoint	    Description
POST	    /register	    Create new user account
POST	    /login	      Authenticate user
GET	      /me        	Get logged-in user data (using token)

2.‚úÖ 2. User Routes (/api/users)
Manages user profiles (accessible to users or admins).
Method	Endpoint	Description
GET	      /	      Get all users (admin only)
GET	      /:id	   Get a single user's details
PUT	      /:id	  Update user profile
DELETE	  /:id	   Delete user (admin only)

3.‚úÖ 3. Loan Routes (/api/loans)
Handles loan applications and management.
Method	Endpoint	Description
POST	  /apply	  Apply for a new loan
GET   	/	        Get all loans (admin or own loans)
GET	    /:id	    Get specific loan details
PUT	   /:id/status	Update loan status (admin)
DELETE	/:id	     Delete/cancel loan (user/admin)

4.‚úÖ 4. Repayment Routes (/api/repayments)
Handles loan repayment schedules and status.
Method	Endpoint	     Description
GET	     /	         Get all repayments (for a user)
GET 	/loan/:loanId	  Get repayments for a specific loan
POST	/pay/:id	      Mark a repayment as paid

‚úÖ 5. Transaction Routes (/api/transactions) 
Track each payment made or failed.
Method	Endpoint	   Description
GET	      /	       Get all transactions
POST	    /	       Create a transaction record

üì© 6. Notification Routes (/api/notifications)
Useful for reminding users of upcoming repayments or system alerts.
Method	Endpoint	Description
GET	    /	        Get all notifications for user
POST	  /	        Create a notification (system/admin)
PUT	    /:id/read	  Mark notification as read
DELETE	/:id	    Delete notification

üìÑ 7. Document Routes (/api/documents)
To handle ID proof, income proof, etc., often needed for loan approval.
Method	Endpoint	Description
POST	/upload    	Upload user documents
GET	  /	          Get all documents (admin)
GET	   /:id	     view/download document
DELETE	/:id	   Delete document

‚öôÔ∏è 8. Settings Routes (/api/settings)
For managing global settings like interest rates, loan terms, etc. Usually only accessed by admins.
Method	Endpoint	Description
GET    	/	        Get current settings (admin)
PUT	    /       	Update settings (admin)