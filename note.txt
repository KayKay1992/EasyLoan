setting notification model, routes, and controller skeleton and using the route in server.js


Model: The Notification model stores messages for users with fields like type, title, message, user, read, and createdAt.

Type Enum: The type can be "system", indicating automated notifications triggered by system events like loan approval or repayment.

Routes: Routes include endpoints for creating, fetching, updating, and deleting notifications (e.g., GET /api/notifications, POST, PUT, DELETE).

Controller Skeleton: The controller contains handlers like getAllNotifications, markAsRead, and createNotification, using asyncHandler for error handling.

User Notifications: Logged-in users can fetch all or only unread notifications to stay updated on their loan activities.

Admin Notifications: Admins can generate new notifications (like loan offers) using the POST route.

Mark as Read: Notifications can be marked as read to improve UX and track engagement.

Deletion: Users can delete old or irrelevant notifications via the DELETE endpoint.

Population: When retrieving notifications, user data can be populated for clarity if needed (admin views).

Use Case: This system helps notify users about events like loan approval, successful repayment, or missed due dates.









